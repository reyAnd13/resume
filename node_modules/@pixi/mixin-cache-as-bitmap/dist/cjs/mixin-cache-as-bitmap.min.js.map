{"version":3,"file":"mixin-cache-as-bitmap.min.js","sources":["../../src/index.ts"],"sourcesContent":["import { Texture, BaseTexture, RenderTexture, Renderer, MaskData } from '@pixi/core';\nimport { Sprite } from '@pixi/sprite';\nimport { Container, DisplayObject, IDestroyOptions } from '@pixi/display';\nimport { IPointData, Matrix, Rectangle } from '@pixi/math';\nimport { uid } from '@pixi/utils';\nimport { settings } from '@pixi/settings';\nimport type { CanvasRenderer } from '@pixi/canvas-renderer';\n\nconst _tempMatrix = new Matrix();\n\nDisplayObject.prototype._cacheAsBitmap = false;\nDisplayObject.prototype._cacheData = null;\nDisplayObject.prototype._cacheAsBitmapResolution = null;\n\n// figured there's no point adding ALL the extra variables to prototype.\n// this model can hold the information needed. This can also be generated on demand as\n// most objects are not cached as bitmaps.\n/**\n * @class\n * @ignore\n * @private\n */\nexport class CacheData\n{\n    public textureCacheId: string;\n    public originalRender: (renderer: Renderer) => void;\n    public originalRenderCanvas: (renderer: CanvasRenderer) => void;\n    public originalCalculateBounds: () => void;\n    public originalGetLocalBounds: (rect?: Rectangle) => Rectangle;\n    public originalUpdateTransform: () => void;\n    public originalDestroy: (options?: IDestroyOptions|boolean) => void;\n    public originalMask: Container|MaskData;\n    public originalFilterArea: Rectangle;\n    public originalContainsPoint: (point: IPointData) => boolean;\n    public sprite: Sprite;\n\n    constructor()\n    {\n        this.textureCacheId = null;\n\n        this.originalRender = null;\n        this.originalRenderCanvas = null;\n        this.originalCalculateBounds = null;\n        this.originalGetLocalBounds = null;\n\n        this.originalUpdateTransform = null;\n        this.originalDestroy = null;\n        this.originalMask = null;\n        this.originalFilterArea = null;\n        this.originalContainsPoint = null;\n        this.sprite = null;\n    }\n}\n\nObject.defineProperties(DisplayObject.prototype, {\n    /**\n     * The resolution to use for cacheAsBitmap. By default this will use the renderer's resolution\n     * but can be overriden for performance. Lower values will reduce memory usage at the expense\n     * of render quality. A falsey value of `null` or `0` will default to the renderer's resolution.\n     * If `cacheAsBitmap` is set to `true`, this will re-render with the new resolution.\n     *\n     * @member {number} cacheAsBitmapResolution\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     */\n    cacheAsBitmapResolution: {\n        get(): number\n        {\n            return this._cacheAsBitmapResolution;\n        },\n        set(resolution: number): void\n        {\n            if (resolution === this._cacheAsBitmapResolution)\n            {\n                return;\n            }\n\n            this._cacheAsBitmapResolution = resolution;\n\n            if (this.cacheAsBitmap)\n            {\n                // Toggle to re-render at the new resolution\n                this.cacheAsBitmap = false;\n                this.cacheAsBitmap = true;\n            }\n        },\n    },\n\n    /**\n     * Set this to true if you want this display object to be cached as a bitmap.\n     * This basically takes a snap shot of the display object as it is at that moment. It can\n     * provide a performance benefit for complex static displayObjects.\n     * To remove simply set this property to `false`\n     *\n     * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\n     * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n     *\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     */\n    cacheAsBitmap: {\n        get(): CacheData\n        {\n            return this._cacheAsBitmap;\n        },\n        set(value: CacheData): void\n        {\n            if (this._cacheAsBitmap === value)\n            {\n                return;\n            }\n\n            this._cacheAsBitmap = value;\n\n            let data: CacheData;\n\n            if (value)\n            {\n                if (!this._cacheData)\n                {\n                    this._cacheData = new CacheData();\n                }\n\n                data = this._cacheData;\n\n                data.originalRender = this.render;\n                data.originalRenderCanvas = this.renderCanvas;\n\n                data.originalUpdateTransform = this.updateTransform;\n                data.originalCalculateBounds = this.calculateBounds;\n                data.originalGetLocalBounds = this.getLocalBounds;\n\n                data.originalDestroy = this.destroy;\n\n                data.originalContainsPoint = this.containsPoint;\n\n                data.originalMask = this._mask;\n                data.originalFilterArea = this.filterArea;\n\n                this.render = this._renderCached;\n                this.renderCanvas = this._renderCachedCanvas;\n\n                this.destroy = this._cacheAsBitmapDestroy;\n            }\n            else\n            {\n                data = this._cacheData;\n\n                if (data.sprite)\n                {\n                    this._destroyCachedDisplayObject();\n                }\n\n                this.render = data.originalRender;\n                this.renderCanvas = data.originalRenderCanvas;\n                this.calculateBounds = data.originalCalculateBounds;\n                this.getLocalBounds = data.originalGetLocalBounds;\n\n                this.destroy = data.originalDestroy;\n\n                this.updateTransform = data.originalUpdateTransform;\n                this.containsPoint = data.originalContainsPoint;\n\n                this._mask = data.originalMask;\n                this.filterArea = data.originalFilterArea;\n            }\n        },\n    },\n});\n\n/**\n * Renders a cached version of the sprite with WebGL\n *\n * @private\n * @method _renderCached\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._renderCached = function _renderCached(renderer: Renderer): void\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    this._initCachedDisplayObject(renderer);\n\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    (this._cacheData.sprite as any)._render(renderer);\n};\n\n/**\n * Prepares the WebGL renderer to cache the sprite\n *\n * @private\n * @method _initCachedDisplayObject\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._initCachedDisplayObject = function _initCachedDisplayObject(renderer: Renderer): void\n{\n    if (this._cacheData && this._cacheData.sprite)\n    {\n        return;\n    }\n\n    // make sure alpha is set to 1 otherwise it will get rendered as invisible!\n    const cacheAlpha = this.alpha;\n\n    this.alpha = 1;\n\n    // first we flush anything left in the renderer (otherwise it would get rendered to the cached texture)\n    renderer.batch.flush();\n    // this.filters= [];\n\n    // next we find the dimensions of the untransformed object\n    // this function also calls updatetransform on all its children as part of the measuring.\n    // This means we don't need to update the transform again in this function\n    // TODO pass an object to clone too? saves having to create a new one each time!\n    const bounds = (this as Container).getLocalBounds(null, true).clone();\n\n    // add some padding!\n    if (this.filters)\n    {\n        const padding = this.filters[0].padding;\n\n        bounds.pad(padding);\n    }\n\n    bounds.ceil(settings.RESOLUTION);\n\n    // for now we cache the current renderTarget that the WebGL renderer is currently using.\n    // this could be more elegant..\n    const cachedRenderTexture = renderer.renderTexture.current;\n    const cachedSourceFrame = renderer.renderTexture.sourceFrame.clone();\n    const cachedDestinationFrame = renderer.renderTexture.destinationFrame.clone();\n    const cachedProjectionTransform = renderer.projection.transform;\n\n    // We also store the filter stack - I will definitely look to change how this works a little later down the line.\n    // const stack = renderer.filterManager.filterStack;\n\n    // this renderTexture will be used to store the cached DisplayObject\n    const renderTexture = RenderTexture.create({\n        width: bounds.width,\n        height: bounds.height,\n        resolution: this.cacheAsBitmapResolution || renderer.resolution,\n    });\n\n    const textureCacheId = `cacheAsBitmap_${uid()}`;\n\n    this._cacheData.textureCacheId = textureCacheId;\n\n    BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    Texture.addToCache(renderTexture, textureCacheId);\n\n    // need to set //\n    const m = this.transform.localTransform.copyTo(_tempMatrix).invert().translate(-bounds.x, -bounds.y);\n\n    // set all properties to there original so we can render to a texture\n    this.render = this._cacheData.originalRender;\n\n    renderer.render(this, { renderTexture, clear: true, transform: m, skipUpdateTransform: false });\n\n    // now restore the state be setting the new properties\n    renderer.projection.transform = cachedProjectionTransform;\n    renderer.renderTexture.bind(cachedRenderTexture, cachedSourceFrame, cachedDestinationFrame);\n\n    // renderer.filterManager.filterStack = stack;\n\n    this.render = this._renderCached;\n    // the rest is the same as for Canvas\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n\n    this._mask = null;\n    this.filterArea = null;\n    this.alpha = cacheAlpha;\n\n    // create our cached sprite\n    const cachedSprite = new Sprite(renderTexture);\n\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n\n    this._cacheData.sprite = cachedSprite;\n\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent)\n    {\n        this.enableTempParent();\n        this.updateTransform();\n        this.disableTempParent(null);\n    }\n    else\n    {\n        this.updateTransform();\n    }\n\n    // map the hit test..\n    (this as Sprite).containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Renders a cached version of the sprite with canvas\n *\n * @private\n * @method _renderCachedCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\nDisplayObject.prototype._renderCachedCanvas = function _renderCachedCanvas(renderer: CanvasRenderer): void\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    this._initCachedDisplayObjectCanvas(renderer);\n\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    (this._cacheData.sprite as any)._renderCanvas(renderer);\n};\n\n// TODO this can be the same as the WebGL version.. will need to do a little tweaking first though..\n/**\n * Prepares the Canvas renderer to cache the sprite\n *\n * @private\n * @method _initCachedDisplayObjectCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\nDisplayObject.prototype._initCachedDisplayObjectCanvas = function _initCachedDisplayObjectCanvas(\n    renderer: CanvasRenderer\n): void\n{\n    if (this._cacheData && this._cacheData.sprite)\n    {\n        return;\n    }\n\n    // get bounds actually transforms the object for us already!\n    const bounds = (this as Container).getLocalBounds(null, true);\n\n    const cacheAlpha = this.alpha;\n\n    this.alpha = 1;\n\n    const cachedRenderTarget = renderer.context;\n    const cachedProjectionTransform = (renderer as any)._projTransform;\n\n    bounds.ceil(settings.RESOLUTION);\n\n    const renderTexture = RenderTexture.create({ width: bounds.width, height: bounds.height });\n\n    const textureCacheId = `cacheAsBitmap_${uid()}`;\n\n    this._cacheData.textureCacheId = textureCacheId;\n\n    BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    Texture.addToCache(renderTexture, textureCacheId);\n\n    // need to set //\n    const m = _tempMatrix;\n\n    this.transform.localTransform.copyTo(m);\n    m.invert();\n\n    m.tx -= bounds.x;\n    m.ty -= bounds.y;\n\n    // m.append(this.transform.worldTransform.)\n    // set all properties to there original so we can render to a texture\n    this.renderCanvas = this._cacheData.originalRenderCanvas;\n\n    renderer.render(this, { renderTexture, clear: true, transform: m, skipUpdateTransform: false });\n    // now restore the state be setting the new properties\n    renderer.context = cachedRenderTarget;\n    (renderer as any)._projTransform = cachedProjectionTransform;\n\n    this.renderCanvas = this._renderCachedCanvas;\n    // the rest is the same as for WebGL\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n\n    this._mask = null;\n    this.filterArea = null;\n    this.alpha = cacheAlpha;\n\n    // create our cached sprite\n    const cachedSprite = new Sprite(renderTexture);\n\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n\n    this._cacheData.sprite = cachedSprite;\n\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent)\n    {\n        this.parent = (renderer as any)._tempDisplayObjectParent;\n        this.updateTransform();\n        this.parent = null;\n    }\n    else\n    {\n        this.updateTransform();\n    }\n\n    // map the hit test..\n    (this as Sprite).containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Calculates the bounds of the cached sprite\n *\n * @private\n * @method\n */\nDisplayObject.prototype._calculateCachedBounds = function _calculateCachedBounds(): void\n{\n    this._bounds.clear();\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    (this._cacheData.sprite as any)._calculateBounds();\n    this._bounds.updateID = (this as any)._boundsID;\n};\n\n/**\n * Gets the bounds of the cached sprite.\n *\n * @private\n * @method\n * @return {Rectangle} The local bounds.\n */\nDisplayObject.prototype._getCachedLocalBounds = function _getCachedLocalBounds(): Rectangle\n{\n    return this._cacheData.sprite.getLocalBounds(null);\n};\n\n/**\n * Destroys the cached sprite.\n *\n * @private\n * @method\n */\nDisplayObject.prototype._destroyCachedDisplayObject = function _destroyCachedDisplayObject(): void\n{\n    this._cacheData.sprite._texture.destroy(true);\n    this._cacheData.sprite = null;\n\n    BaseTexture.removeFromCache(this._cacheData.textureCacheId);\n    Texture.removeFromCache(this._cacheData.textureCacheId);\n\n    this._cacheData.textureCacheId = null;\n};\n\n/**\n * Destroys the cached object.\n *\n * @private\n * @method\n * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n *  have been set to that value.\n *  Used when destroying containers, see the Container.destroy method.\n */\nDisplayObject.prototype._cacheAsBitmapDestroy = function _cacheAsBitmapDestroy(options?: IDestroyOptions|boolean): void\n{\n    this.cacheAsBitmap = false;\n    this.destroy(options);\n};\n"],"names":["_tempMatrix","Matrix","DisplayObject","prototype","_cacheAsBitmap","_cacheData","_cacheAsBitmapResolution","this","textureCacheId","originalRender","originalRenderCanvas","originalCalculateBounds","originalGetLocalBounds","originalUpdateTransform","originalDestroy","originalMask","originalFilterArea","originalContainsPoint","sprite","Object","defineProperties","cacheAsBitmapResolution","get","set","resolution","cacheAsBitmap","value","data","CacheData","render","renderCanvas","updateTransform","calculateBounds","getLocalBounds","destroy","containsPoint","_mask","filterArea","_renderCached","_renderCachedCanvas","_cacheAsBitmapDestroy","_destroyCachedDisplayObject","renderer","visible","worldAlpha","renderable","_initCachedDisplayObject","transform","_worldID","_render","cacheAlpha","alpha","batch","flush","bounds","clone","filters","padding","pad","ceil","settings","RESOLUTION","cachedRenderTexture","renderTexture","current","cachedSourceFrame","sourceFrame","cachedDestinationFrame","destinationFrame","cachedProjectionTransform","projection","RenderTexture","create","width","height","uid","BaseTexture","addToCache","baseTexture","Texture","m","localTransform","copyTo","invert","translate","x","y","clear","skipUpdateTransform","bind","displayObjectUpdateTransform","_calculateCachedBounds","_getCachedLocalBounds","cachedSprite","Sprite","worldTransform","anchor","_bounds","_parentID","parent","enableTempParent","disableTempParent","_initCachedDisplayObjectCanvas","_renderCanvas","cachedRenderTarget","context","_projTransform","tx","ty","_tempDisplayObjectParent","_calculateBounds","updateID","_boundsID","_texture","removeFromCache","options"],"mappings":"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"}